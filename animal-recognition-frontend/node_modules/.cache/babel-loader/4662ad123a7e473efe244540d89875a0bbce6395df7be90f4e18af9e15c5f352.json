{"ast":null,"code":"var _jsxFileName = \"/Users/maheep/animal-recognition-frontend/src/ImageUpload.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport axios from 'axios';\nimport './App.css'; // We'll create some CSS for styling\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction ImageUpload() {\n  _s();\n  const [image, setImage] = useState(null); // Store the uploaded image\n  const [preview, setPreview] = useState(''); // Store the preview URL\n  const [result, setResult] = useState(''); // Store the classification result\n  const [loading, setLoading] = useState(false); // Show loading indicator\n\n  // Handle image change and preview setup\n  const handleImageChange = e => {\n    const file = e.target.files[0];\n    setImage(file);\n    setPreview(URL.createObjectURL(file));\n    setResult(''); // Reset result when a new image is uploaded\n  };\n\n  // Submit image for classification\n  const handleSubmit = async e => {\n    e.preventDefault();\n    setLoading(true); // Start loading indicator\n\n    // Debugging: Check if image state contains the correct file\n    console.log(\"Image being uploaded:\", image);\n    const formData = new FormData();\n    formData.append('image', image);\n    try {\n      const response = await axios.post('http://127.0.0.1:5000/classify', formData, {\n        headers: {\n          'Content-Type': 'multipart/form-data'\n        }\n      });\n      setResult(response.data.classification); // Set result to the classification result\n    } catch (error) {\n      // Log the full error object to check the issue\n      console.error('Error uploading image:', error);\n\n      // Check if there's a specific error message from Axios\n      if (error.response) {\n        console.log('Server responded with status:', error.response.status);\n        console.log('Response data:', error.response.data);\n      }\n      setResult('Error occurred during classification.');\n    } finally {\n      setLoading(false); // Stop loading indicator\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"image-upload-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Animal Image Recognition\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      className: \"upload-form\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"file-input\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"file\",\n          accept: \"image/*\",\n          onChange: handleImageChange,\n          required: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 21\n        }, this), preview && /*#__PURE__*/_jsxDEV(\"img\", {\n          src: preview,\n          alt: \"Preview\",\n          className: \"image-preview\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 33\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        disabled: !image || loading,\n        className: \"upload-button\",\n        children: loading ? 'Classifying...' : 'Upload & Classify'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 13\n    }, this), loading && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"loading-spinner\",\n      children: \"Processing...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 25\n    }, this), result && /*#__PURE__*/_jsxDEV(\"h2\", {\n      className: \"result\",\n      children: [\"Result: \", result]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 24\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 55,\n    columnNumber: 9\n  }, this);\n}\n_s(ImageUpload, \"E5yvMCbsX8PoGsoZ1HqN+zWwMSs=\");\n_c = ImageUpload;\nexport default ImageUpload;\nvar _c;\n$RefreshReg$(_c, \"ImageUpload\");","map":{"version":3,"names":["React","useState","axios","jsxDEV","_jsxDEV","ImageUpload","_s","image","setImage","preview","setPreview","result","setResult","loading","setLoading","handleImageChange","e","file","target","files","URL","createObjectURL","handleSubmit","preventDefault","console","log","formData","FormData","append","response","post","headers","data","classification","error","status","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","type","accept","onChange","required","src","alt","disabled","_c","$RefreshReg$"],"sources":["/Users/maheep/animal-recognition-frontend/src/ImageUpload.js"],"sourcesContent":["import React, { useState } from 'react';\nimport axios from 'axios';\nimport './App.css';  // We'll create some CSS for styling\n\nfunction ImageUpload() {\n    const [image, setImage] = useState(null);  // Store the uploaded image\n    const [preview, setPreview] = useState('');  // Store the preview URL\n    const [result, setResult] = useState('');  // Store the classification result\n    const [loading, setLoading] = useState(false);  // Show loading indicator\n\n    // Handle image change and preview setup\n    const handleImageChange = (e) => {\n        const file = e.target.files[0];\n        setImage(file);\n        setPreview(URL.createObjectURL(file));\n        setResult('');  // Reset result when a new image is uploaded\n    };\n\n    // Submit image for classification\n    const handleSubmit = async (e) => {\n        e.preventDefault();\n        setLoading(true);  // Start loading indicator\n    \n        // Debugging: Check if image state contains the correct file\n        console.log(\"Image being uploaded:\", image);\n    \n        const formData = new FormData();\n        formData.append('image', image);\n    \n        try {\n            const response = await axios.post('http://127.0.0.1:5000/classify', formData, {\n                headers: {\n                    'Content-Type': 'multipart/form-data',\n                },\n            });\n            setResult(response.data.classification);  // Set result to the classification result\n        } catch (error) {\n            // Log the full error object to check the issue\n            console.error('Error uploading image:', error);\n    \n            // Check if there's a specific error message from Axios\n            if (error.response) {\n                console.log('Server responded with status:', error.response.status);\n                console.log('Response data:', error.response.data);\n            }\n    \n            setResult('Error occurred during classification.');\n        } finally {\n            setLoading(false);  // Stop loading indicator\n        }\n    };\n    \n\n    return (\n        <div className=\"image-upload-container\">\n            <h1>Animal Image Recognition</h1>\n            <form onSubmit={handleSubmit} className=\"upload-form\">\n                <div className=\"file-input\">\n                    <input type=\"file\" accept=\"image/*\" onChange={handleImageChange} required />\n                    {preview && <img src={preview} alt=\"Preview\" className=\"image-preview\" />}\n                </div>\n                <button type=\"submit\" disabled={!image || loading} className=\"upload-button\">\n                    {loading ? 'Classifying...' : 'Upload & Classify'}\n                </button>\n            </form>\n            {loading && <div className=\"loading-spinner\">Processing...</div>}\n            {result && <h2 className=\"result\">Result: {result}</h2>}\n        </div>\n    );\n}\n\nexport default ImageUpload;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,OAAOC,KAAK,MAAM,OAAO;AACzB,OAAO,WAAW,CAAC,CAAE;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAErB,SAASC,WAAWA,CAAA,EAAG;EAAAC,EAAA;EACnB,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGP,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAE;EAC3C,MAAM,CAACQ,OAAO,EAAEC,UAAU,CAAC,GAAGT,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAE;EAC7C,MAAM,CAACU,MAAM,EAAEC,SAAS,CAAC,GAAGX,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAE;EAC3C,MAAM,CAACY,OAAO,EAAEC,UAAU,CAAC,GAAGb,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAE;;EAEhD;EACA,MAAMc,iBAAiB,GAAIC,CAAC,IAAK;IAC7B,MAAMC,IAAI,GAAGD,CAAC,CAACE,MAAM,CAACC,KAAK,CAAC,CAAC,CAAC;IAC9BX,QAAQ,CAACS,IAAI,CAAC;IACdP,UAAU,CAACU,GAAG,CAACC,eAAe,CAACJ,IAAI,CAAC,CAAC;IACrCL,SAAS,CAAC,EAAE,CAAC,CAAC,CAAE;EACpB,CAAC;;EAED;EACA,MAAMU,YAAY,GAAG,MAAON,CAAC,IAAK;IAC9BA,CAAC,CAACO,cAAc,CAAC,CAAC;IAClBT,UAAU,CAAC,IAAI,CAAC,CAAC,CAAE;;IAEnB;IACAU,OAAO,CAACC,GAAG,CAAC,uBAAuB,EAAElB,KAAK,CAAC;IAE3C,MAAMmB,QAAQ,GAAG,IAAIC,QAAQ,CAAC,CAAC;IAC/BD,QAAQ,CAACE,MAAM,CAAC,OAAO,EAAErB,KAAK,CAAC;IAE/B,IAAI;MACA,MAAMsB,QAAQ,GAAG,MAAM3B,KAAK,CAAC4B,IAAI,CAAC,gCAAgC,EAAEJ,QAAQ,EAAE;QAC1EK,OAAO,EAAE;UACL,cAAc,EAAE;QACpB;MACJ,CAAC,CAAC;MACFnB,SAAS,CAACiB,QAAQ,CAACG,IAAI,CAACC,cAAc,CAAC,CAAC,CAAE;IAC9C,CAAC,CAAC,OAAOC,KAAK,EAAE;MACZ;MACAV,OAAO,CAACU,KAAK,CAAC,wBAAwB,EAAEA,KAAK,CAAC;;MAE9C;MACA,IAAIA,KAAK,CAACL,QAAQ,EAAE;QAChBL,OAAO,CAACC,GAAG,CAAC,+BAA+B,EAAES,KAAK,CAACL,QAAQ,CAACM,MAAM,CAAC;QACnEX,OAAO,CAACC,GAAG,CAAC,gBAAgB,EAAES,KAAK,CAACL,QAAQ,CAACG,IAAI,CAAC;MACtD;MAEApB,SAAS,CAAC,uCAAuC,CAAC;IACtD,CAAC,SAAS;MACNE,UAAU,CAAC,KAAK,CAAC,CAAC,CAAE;IACxB;EACJ,CAAC;EAGD,oBACIV,OAAA;IAAKgC,SAAS,EAAC,wBAAwB;IAAAC,QAAA,gBACnCjC,OAAA;MAAAiC,QAAA,EAAI;IAAwB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACjCrC,OAAA;MAAMsC,QAAQ,EAAEpB,YAAa;MAACc,SAAS,EAAC,aAAa;MAAAC,QAAA,gBACjDjC,OAAA;QAAKgC,SAAS,EAAC,YAAY;QAAAC,QAAA,gBACvBjC,OAAA;UAAOuC,IAAI,EAAC,MAAM;UAACC,MAAM,EAAC,SAAS;UAACC,QAAQ,EAAE9B,iBAAkB;UAAC+B,QAAQ;QAAA;UAAAR,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE,CAAC,EAC3EhC,OAAO,iBAAIL,OAAA;UAAK2C,GAAG,EAAEtC,OAAQ;UAACuC,GAAG,EAAC,SAAS;UAACZ,SAAS,EAAC;QAAe;UAAAE,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACxE,CAAC,eACNrC,OAAA;QAAQuC,IAAI,EAAC,QAAQ;QAACM,QAAQ,EAAE,CAAC1C,KAAK,IAAIM,OAAQ;QAACuB,SAAS,EAAC,eAAe;QAAAC,QAAA,EACvExB,OAAO,GAAG,gBAAgB,GAAG;MAAmB;QAAAyB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAC7C,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACP,CAAC,EACN5B,OAAO,iBAAIT,OAAA;MAAKgC,SAAS,EAAC,iBAAiB;MAAAC,QAAA,EAAC;IAAa;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC,EAC/D9B,MAAM,iBAAIP,OAAA;MAAIgC,SAAS,EAAC,QAAQ;MAAAC,QAAA,GAAC,UAAQ,EAAC1B,MAAM;IAAA;MAAA2B,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACtD,CAAC;AAEd;AAACnC,EAAA,CAjEQD,WAAW;AAAA6C,EAAA,GAAX7C,WAAW;AAmEpB,eAAeA,WAAW;AAAC,IAAA6C,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}