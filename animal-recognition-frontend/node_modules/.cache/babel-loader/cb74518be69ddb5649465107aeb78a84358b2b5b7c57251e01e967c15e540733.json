{"ast":null,"code":"var _jsxFileName = \"/Users/maheep/animal-recognition-frontend/src/ImageUpload.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction ImageUpload() {\n  _s();\n  const [image, setImage] = useState(null); // Store the uploaded image\n  const [result, setResult] = useState(''); // Store the classification result\n  const [loading, setLoading] = useState(false); // Loading state for while waiting for the API response\n\n  const handleImageChange = e => {\n    setImage(e.target.files[0]); // Get the uploaded image file\n  };\n  const handleSubmit = async e => {\n    e.preventDefault(); // Prevent the default form submission\n    setLoading(true); // Set loading to true during API call\n    const formData = new FormData(); // Create a FormData object to send the image to the backend\n    formData.append('image', image);\n    try {\n      // Send the image to the Flask API\n      const response = await axios.post('http://localhost:5000/classify', formData, {\n        headers: {\n          'Content-Type': 'multipart/form-data'\n        }\n      });\n      setResult(response.data.classification); // Store the result\n    } catch (error) {\n      console.error('Error uploading image:', error);\n      setResult('Error classifying image');\n    } finally {\n      setLoading(false); // Set loading to false after the API call\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      padding: '20px',\n      textAlign: 'center'\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Animal Image Recognition\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"file\",\n        onChange: handleImageChange,\n        accept: \"image/*\",\n        required: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        disabled: !image || loading,\n        children: \"Upload Image\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 13\n    }, this), loading && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 25\n    }, this), result && /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: [\"Result: \", result]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 24\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 36,\n    columnNumber: 9\n  }, this);\n}\n_s(ImageUpload, \"9ixWgAjtvtpN36yxv6hHqdEFJVE=\");\n_c = ImageUpload;\nexport default ImageUpload;\nvar _c;\n$RefreshReg$(_c, \"ImageUpload\");","map":{"version":3,"names":["React","useState","axios","jsxDEV","_jsxDEV","ImageUpload","_s","image","setImage","result","setResult","loading","setLoading","handleImageChange","e","target","files","handleSubmit","preventDefault","formData","FormData","append","response","post","headers","data","classification","error","console","style","padding","textAlign","children","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","type","onChange","accept","required","disabled","_c","$RefreshReg$"],"sources":["/Users/maheep/animal-recognition-frontend/src/ImageUpload.js"],"sourcesContent":["import React, { useState } from 'react';\nimport axios from 'axios';\n\nfunction ImageUpload() {\n    const [image, setImage] = useState(null); // Store the uploaded image\n    const [result, setResult] = useState(''); // Store the classification result\n    const [loading, setLoading] = useState(false); // Loading state for while waiting for the API response\n\n    const handleImageChange = (e) => {\n        setImage(e.target.files[0]); // Get the uploaded image file\n    };\n\n    const handleSubmit = async (e) => {\n        e.preventDefault(); // Prevent the default form submission\n        setLoading(true); // Set loading to true during API call\n        const formData = new FormData(); // Create a FormData object to send the image to the backend\n        formData.append('image', image);\n\n        try {\n            // Send the image to the Flask API\n            const response = await axios.post('http://localhost:5000/classify', formData, {\n                headers: {\n                    'Content-Type': 'multipart/form-data',\n                },\n            });\n            setResult(response.data.classification); // Store the result\n        } catch (error) {\n            console.error('Error uploading image:', error);\n            setResult('Error classifying image');\n        } finally {\n            setLoading(false); // Set loading to false after the API call\n        }\n    };\n\n    return (\n        <div style={{ padding: '20px', textAlign: 'center' }}>\n            <h1>Animal Image Recognition</h1>\n            <form onSubmit={handleSubmit}>\n                <input type=\"file\" onChange={handleImageChange} accept=\"image/*\" required />\n                <button type=\"submit\" disabled={!image || loading}>Upload Image</button>\n            </form>\n            {loading && <p>Loading...</p>}\n            {result && <h2>Result: {result}</h2>}\n        </div>\n    );\n}\n\nexport default ImageUpload;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}